package de.ams.hackathon

import android.graphics.Point

// walkable == 0bxxxxxxx1
val fWall = 0
val fEmpty = 1
val fCoin = 3
val fOrigin = 7
val fDestination = 5

val levels = longArrayOf(
    33, 0x1ffffffff, 0x100111004, 0x1df7557d5, 0x110455455, 0x15fdd55d5, 0x150115111, 0x177f75d7f, 0x114004101, 0x155df7ffd, 0x144410505, 0x1f77df575, 0x110441111, 0x15f77df5d, 0x141141145, 0x17dd5f5d5, 0x115110511, 0x1d5775d77, 0x111544541, 0x17d55557f, 0x144455511, 0x177df5d55, 0x144004145, 0x15fdfdffd, 0x140104105, 0x177d5fd75, 0x104544141, 0x1dd575d75, 0x111104415, 0x177fd77d5, 0x105054455, 0x1dd755d55, 0x000110111, 0x1ffffffff,
    // patterns
    33, 0x1ffffffff, 0x100000000, 0x155555555, 0x155555555, 0x155555555, 0x100000001, 0x155555555, 0x155555555, 0x155555555, 0x100000001, 0x155555555, 0x155555555, 0x155555555, 0x100000001, 0x155555555, 0x155555555, 0x155555555, 0x155555555, 0x155555555, 0x100000001, 0x155555555, 0x155555555, 0x155555555, 0x100000001, 0x155555555, 0x155555555, 0x155555555, 0x100000001, 0x155555555, 0x155555555, 0x155555555, 0x000000001, 0x1ffffffff,
    33, 0x1ffffffff, 0x100000000, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x100000001, 0x155555555, 0x000000001, 0x1ffffffff,
    33, 0x1ffffffff, 0x100000000, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x100000001, 0x000000001, 0x1ffffffff,
    // emptyish
    33, 0x1ffffffff, 0x141411100, 0x155555575, 0x154555545, 0x15755555d, 0x155444555, 0x1557ffd55, 0x115411151, 0x155555557, 0x154544455, 0x155d75d55, 0x115105155, 0x1755d55d5, 0x144555411, 0x155d5d57d, 0x111145545, 0x1d577575d, 0x155455445, 0x1555555d5, 0x115155555, 0x155d55555, 0x154155155, 0x155d57d55, 0x155454445, 0x1557d5555, 0x151451555, 0x15d75f555, 0x144441515, 0x1755555d5, 0x115554505, 0x155555555, 0x040111051, 0x1ffffffff,
    33, 0x1ffffffff, 0x110104410, 0x155d5d55d, 0x144141541, 0x15555f57d, 0x115550115, 0x155555dd5, 0x154454551, 0x157dd755d, 0x140051405, 0x17fd5d775, 0x144515555, 0x155555557, 0x151544401, 0x1d55755f5, 0x115015515, 0x175fd5555, 0x155105555, 0x15555d555, 0x155551555, 0x155557555, 0x151555555, 0x15d555555, 0x140515551, 0x15ddd575d, 0x145454441, 0x175755df5, 0x145555515, 0x155575575, 0x155110545, 0x1555d755d, 0x011404101, 0x1ffffffff,
    33, 0x1ffffffff, 0x141011104, 0x15d5d7555, 0x154554451, 0x157d55d5d, 0x144505111, 0x1755dd55f, 0x155044541, 0x155f57d75, 0x154154505, 0x1555555fd, 0x105501545, 0x1575fd555, 0x154541551, 0x175d5555d, 0x115155545, 0x155555d75, 0x155405115, 0x1d5575755, 0x115115555, 0x1755d5555, 0x145454455, 0x15d7577d5, 0x155150415, 0x155d75555, 0x144115555, 0x1755dd557, 0x155451111, 0x157555d75, 0x111514155, 0x15d5f5d5d, 0x040000401, 0x1ffffffff,
    // horizontal
//  33, 0x1ffffffff, 0x100400000, 0x17fddf7f7, 0x100040001, 0x17777fffd, 0x100101005, 0x1f75dd5dd, 0x100410411, 0x175dd75d7, 0x104000101, 0x17dfdfffd, 0x101000001, 0x1dddfdffd, 0x110104001, 0x17df75dfd, 0x101010005, 0x17dff7ff5, 0x100004101, 0x1f77f5f77, 0x104000041, 0x17ddf77fd, 0x140410001, 0x15f5ddddd, 0x101040041, 0x17df7ff7d, 0x104000101, 0x177fffff7, 0x110000001, 0x1ddffffdd, 0x100000411, 0x17f5ff7d5, 0x000400005, 0x1ffffffff,
    33, 0x1ffffffff, 0x100000100, 0x1777f5d77, 0x100004411, 0x177ff5ddd, 0x100100001, 0x1fff7dffd, 0x100040411, 0x1f7fffddf, 0x104000141, 0x17ddfff7d, 0x100100001, 0x177dddf5d, 0x100410041, 0x1df7f7f7d, 0x111004101, 0x1777ddddd, 0x100000411, 0x1dddf7777, 0x110000001, 0x177fff7dd, 0x144001001, 0x1757f7fdd, 0x101000001, 0x1df7fff7f, 0x100000001, 0x17df5d77d, 0x104041001, 0x1d5ddffdd, 0x110410041, 0x17d7ff77d, 0x001000401, 0x1ffffffff,
    33, 0x1ffffffff, 0x100000000, 0x17ffffffd, 0x140000001, 0x15fffffff, 0x140000001, 0x17ffffffd, 0x140000001, 0x15fffffff, 0x140000001, 0x17ffffffd, 0x140000001, 0x15fffffff, 0x140000001, 0x17ffffffd, 0x140000001, 0x15fffffff, 0x140000001, 0x17ffffffd, 0x140000001, 0x15fffffff, 0x140000001, 0x17ffffffd, 0x140000001, 0x15fffffff, 0x140000001, 0x17ffffffd, 0x140000001, 0x15fffffff, 0x140000001, 0x17ffffffd, 0x000000001, 0x1ffffffff,
    // end boss
    33, 0x1ffffffff, 0x101000400, 0x1f57ff5f5, 0x105001115, 0x15fdfff5d, 0x150500145, 0x175d7fd75, 0x144500511, 0x15f5ff55f, 0x144450541, 0x175f57f7d, 0x104114141, 0x17f775d5d, 0x140445145, 0x1d7ddd575, 0x114154515, 0x17df55dd7, 0x144051451, 0x15575d75d, 0x151444105, 0x15f5f7dfd, 0x150514445, 0x157755f55, 0x154455051, 0x155dd57df, 0x154445045, 0x15777d7f5, 0x155504445, 0x1555f7d5d, 0x145410111, 0x17d75fff5, 0x000040005, 0x1ffffffff,

    33, 0x1ffffffff, 0x140004000, 0x15ff557dd, 0x144151445, 0x175ddd5d5, 0x145111115, 0x15dd7fd75, 0x104500111, 0x1ff5f7fdd, 0x100410055, 0x17ffdfdd5, 0x144050111, 0x157d57f7f, 0x110510101, 0x17f5f77fd, 0x104514445, 0x175d55d55, 0x104545151, 0x1775dd75f, 0x144411041, 0x155f55d5d, 0x115044551, 0x1fd7f7d75, 0x101114545, 0x17fd5d55d, 0x140141015, 0x17df7f7f5, 0x145140441, 0x15555dd7d, 0x114444545, 0x177ffd575, 0x010001101, 0x1ffffffff,
    33, 0x1ffffffff, 0x110404040, 0x1d75f7775, 0x115410545, 0x15555fd5f, 0x151541141, 0x17f75d575, 0x101444515, 0x17d57fddd, 0x145500451, 0x15d55f5d7, 0x145550111, 0x1755d7575, 0x105114545, 0x1f575d575, 0x144051541, 0x157f7775d, 0x110405445, 0x1f75dd5d5, 0x104111515, 0x17fd755f5, 0x101505415, 0x1fd5fd555, 0x101101145, 0x17777ff7d, 0x114440045, 0x1d5ddfdd5, 0x110441115, 0x17df7f75d, 0x145111545, 0x1575d5575, 0x010404011, 0x1ffffffff,
    33, 0x1ffffffff, 0x111400000, 0x1555ffdfd, 0x155510415, 0x15555df55, 0x144044055, 0x17fff77d5, 0x100000401, 0x17ffff5fd, 0x110404401, 0x1d5df7ffd, 0x105110001, 0x17f75fd7f, 0x144540511, 0x1f5d7f555, 0x105141545, 0x17555d5f5, 0x101551515, 0x1ff55755d, 0x100551141, 0x17dd7df7d, 0x140504041, 0x15f5f57fd, 0x151105405, 0x155f7d5f5, 0x144045105, 0x177fd5f7d, 0x140014451, 0x1777d75d7, 0x114510505, 0x1ddd7fd7d, 0x001000001, 0x1ffffffff,
    33, 0x1ffffffff, 0x114000000, 0x155ff7ffd, 0x144010101, 0x17f7dfddf, 0x110450441, 0x157d5777d, 0x140551141, 0x17fd5d75f, 0x110411451, 0x1d7555dd5, 0x151145115, 0x15df7d7d5, 0x155111045, 0x1557d775d, 0x105450451, 0x1fd5575d7, 0x101111141, 0x177fd575d, 0x144044411, 0x15df5fd77, 0x144541101, 0x17755777d, 0x144554445, 0x17dddddd5, 0x104101551, 0x1f7ddf55d, 0x110441555, 0x17f77d555, 0x111041045, 0x155fdffd5, 0x044000011, 0x1ffffffff,
    33, 0x1ffffffff, 0x100004010, 0x17f77d7dd, 0x111141001, 0x1ddddff5d, 0x150400141, 0x1577fff5f, 0x155410051, 0x1557d7dd5, 0x155150405, 0x155d5f7ff, 0x144541101, 0x17d57d57d, 0x141141411, 0x15ff5fff5, 0x144050005, 0x175ddf7dd, 0x104511005, 0x1d5d75f55, 0x110144155, 0x17f75fd5d, 0x104451051, 0x15ddd5fd7, 0x141114115, 0x17f757d55, 0x141140455, 0x1dddf7555, 0x114510551, 0x17755fd7d, 0x101140111, 0x1fdf7ff57, 0x000000041, 0x1ffffffff,
    33, 0x1ffffffff, 0x140041040, 0x15f7ddf57, 0x151044111, 0x15dd77dfd, 0x150114405, 0x1575d5df5, 0x110501005, 0x17757f7fd, 0x144044401, 0x17df75f77, 0x101105151, 0x1ffdf755d, 0x100051505, 0x1d5f5d5f5, 0x114151505, 0x175d575f5, 0x115510415, 0x1dd5fffd5, 0x111500055, 0x17755f7d5, 0x140540015, 0x15fd7fffd, 0x154111041, 0x155dd755d, 0x105510555, 0x1dd577d55, 0x101140111, 0x17f77f5f7, 0x141141415, 0x15df5d575, 0x004010501, 0x1ffffffff,
    33, 0x1ffffffff, 0x104011010, 0x157dd57d5, 0x150044445, 0x155f5ff7d, 0x154540405, 0x15d57f5dd, 0x145001151, 0x1757fdf57, 0x111410011, 0x1df5dfd7d, 0x111044541, 0x17dff55dd, 0x101015411, 0x1fd7d57f7, 0x100105411, 0x17ddfd7dd, 0x145441041, 0x1d575f75f, 0x114114441, 0x177df55dd, 0x151041005, 0x15ff7f7fd, 0x144104045, 0x155df5fd5, 0x114451011, 0x1f775d7fd, 0x114541011, 0x175d7ffdf, 0x104000441, 0x17d7ff57d, 0x001000101, 0x1ffffffff,
    33, 0x1ffffffff, 0x111000010, 0x1d57fdd75, 0x114444505, 0x177dd75fd, 0x110411111, 0x1df57dd57, 0x111544451, 0x1755577dd, 0x114151101, 0x155d57d75, 0x145110145, 0x1fd7f7f5d, 0x101045045, 0x177ddd7f7, 0x144110401, 0x17dd75ddd, 0x100444155, 0x177df5f55, 0x110505105, 0x17755d5fd, 0x145151505, 0x15dfd7575, 0x145044445, 0x17555dfdd, 0x115551045, 0x1755577d5, 0x144554411, 0x1dfd7557d, 0x110545505, 0x17755dddd, 0x004110041, 0x1ffffffff,
    33, 0x1ffffffff, 0x111104000, 0x15555dfdd, 0x144445015, 0x17fff57f5, 0x100011041, 0x17f5dfd7f, 0x141504501, 0x1dd77d7f5, 0x115111115, 0x1775d7d5d, 0x100411541, 0x17f7dd57d, 0x141045041, 0x15d7757df, 0x115514111, 0x1f55d7d75, 0x105041145, 0x175fff75d, 0x114400411, 0x1575ffdf5, 0x145444405, 0x1757557fd, 0x155051111, 0x155fddd57, 0x141050455, 0x17f7577d5, 0x110414515, 0x157ddd555, 0x144111455, 0x17f557575, 0x000444101, 0x1ffffffff,
)

class Engine {

    val north = 0
    val east = 1
    val south = 2
    val west = 3

    var currentDirection = east

    var dead = false
    var collected = 0

    val rows = 33
    val columns = 33
    var level = 0
    var basic = true

    val origin: Point = Point(0, 1)
    val destination: Point = Point(columns - 1, rows - 2)
    var path: IntArray = intArrayOf()
    var step = 0

    val world = Array(columns) { IntArray(rows) }
    var position = Point(origin.x, origin.y)
    var lastPosition = Point(origin.x, origin.y)

    fun reset() {
        for (y in 0 until rows - 1) {
            var row = levels[1 + (1 + rows) * level + y]

            for (x in 0 until columns - 1) {
                world[x][y] = if ((row % 2L) == 1L) fWall else fEmpty

                row = row shr 1
            }

            dead = false
        }

        var rand: UInt = level.toUInt()
        val mul: UInt = 1103515245.toUInt()
        val inc: UInt = 12345.toUInt()

        var coins = 0

        while (coins < 50) {
            rand = rand * mul + inc
            val pos = rand shr 16
            val x = (pos % columns.toUInt()).toInt()
            val y = ((pos / rows.toUInt()) % rows.toUInt()).toInt()

            if (world[x][y] == fEmpty) {
                world[x][y] = fCoin
                coins++
            }
        }

        world[0][1] = fOrigin
        world[columns-1][rows-2] = fDestination

        position = Point(origin.x, origin.y)
        lastPosition = Point(origin.x, origin.y)
        step = 0

        collected = 0

        return
    }

    fun step() : Boolean {
        print(step)
        print(path.size)

        if (dead) {
            reset()
        }

        if (step >= path.size) {
            return false
        }

        val old = Point(position.x, position.y)
        // world[position.x][position.y] = 1

        currentDirection = path[step]

        when (currentDirection) {
            0 -> position.y -= 1
            1 -> position.x += 1
            2 -> position.y += 1
            3 -> position.x -= 1
        }

        lastPosition = Point(old.x, old.y)

        if ((position.x >= columns) or (position.y >= rows) or (position.x < 0) or (position.y < 0)) {
            print("You are out of bounds")
            dead = true
            return false
        } else
        // all walkable fields have bit 0 set
            if (world[position.x][position.y] and 1 == 0) {
                // fail
                print("You walked into a wall")
                dead = true
                return false
            } else {
                if ((world[position.x][position.y] == fCoin) && !basic) {
                    collected += 1
                    world[position.x][position.y] = fEmpty
                }

                lastPosition = Point(old.x, old.y)
            }

        step++
        return true

        /*
        for (x in 0..rows - 1) {
           for (y in 0..columns - 1) {
              world[x][y] = Random.nextInt(0, 3)
           }
        }
        */

    }

}